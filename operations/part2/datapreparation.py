# -*- coding: utf-8 -*-
"""DataPreparation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/109JU9QEYoRUBfQPql4T59uEn4BlIv-2M
"""

import duckdb
import pandas as pd

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import duckdb

#from google.colab import drive
#drive.mount('/content/drive')

conn_input = duckdb.connect(database='/content/drive/MyDrive/ADSDB/colabs-part2/Analytical Sandbox/complete.db', read_only=True)
conn_out = duckdb.connect('/content/drive/MyDrive/ADSDB/colabs-part2/Data Preparation/prepared_data.db')

cursor = conn_input.cursor()

# Execute the query to get a list of all tables
cursor.execute("SHOW TABLES")

# Fetch all the results
tables = cursor.fetchall()

# Print the list of tables
print("Tables in the database:")
for table in tables:
    print(table[0])

df = conn_input.execute("SELECT * FROM house_price_indexes").df()
df.head()

df['Quarter'] = df['Quarter'].str.replace('Q', '-')
def roman_to_quarter(roman):
    roman_numerals = {'I': 1, 'II': 2, 'III': 3, 'IV': 4}
    year, numeral = roman.split('-')
    quarter_number = roman_numerals[numeral]
    return f'{year}-Q{quarter_number}'

# Apply the function to the 'Quarter' column
df['Quarter'] = df['Quarter'].apply(roman_to_quarter)
df.head()

unique_values = df['Quarter'].unique()
print(unique_values)

#df['Year'] = pd.to_datetime(df['Year'], format='%Y')
df['Quarter'] = pd.to_datetime(df['Quarter'])

# Print the data types of each column
print(df.dtypes)

# We reduce the scope to type = general and national level
df = df[(df['house_price_index_type'] == 'General') & (df['Provinces'] == 'National Total')]
df.head()

# Plot the time series data
plt.figure(figsize=(10, 6))
plt.plot(df.index, df['house_price_index'], marker='o', linestyle='-')
plt.title('Time Series Data')
plt.xlabel('Date')
plt.ylabel('Value')
plt.grid(True)
plt.show()

# We drop all the columns that the model will not use and sort
df = df[['Quarter','house_price_index']]
df.head()

# Create table in the output database
conn_out.execute("""
CREATE OR REPLACE TABLE prepared_data AS
SELECT *
FROM df;
""")

# Print tables in conn_out
result = conn_out.execute("SHOW TABLES;")

rows = result.fetchall()
for row in rows:
    print(row[0])

# Close and save databases

conn_input.close()
conn_out.close()