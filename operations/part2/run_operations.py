# -*- coding: utf-8 -*-
"""run_operations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U_VhNlUvYmoOXF04rqfak8EzZo1t-To9
"""

# Commented out IPython magic to ensure Python compatibility.
# Import necessary libraries and modules
from google.colab import drive
import psutil
import os
import logging
!pip install --quiet duckdb
!pip install --quiet jupysql
!pip install --quiet duckdb-engine
!pip install --quiet pandas
!pip install --quiet matplotlib
!pip install pmdarima


# Mount Google Drive
drive.mount('/content/drive')

# Change to the directory containing your scripts
# %cd /content/drive/My Drive/ADSDB/operations/part2

# Install necessary libraries
!pip install psutil

# Define the monitor_performance function
def monitor_performance():
    """
    Function to print basic system performance metrics.
    """
    print("\n--- System Performance Metrics ---")
    print(f"CPU Usage: {psutil.cpu_percent()}%")
    print(f"Memory Usage: {psutil.virtual_memory().percent}%")
    print("----------------------------------\n")


logging.basicConfig(filename='script_execution.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def execute_script(script_name):
    """
    Execute a given Python script and handle potential errors.
    """
    # Create/overwrite a file for the script's error output
    error_file_path = f"{script_name}_error.log"

    # Run the script and redirect its stderr to the error file
    exit_code = os.system(f"python {script_name} 2>{error_file_path}")

    if exit_code == 0:
        print(f"Execution of {script_name} completed successfully!")
        logging.info(f"Execution of {script_name} completed successfully!")
        # If no errors, remove the error log file for cleanliness
        os.remove(error_file_path)
    else:
        print(f"Error executing {script_name}. Check {error_file_path} for details.")
        with open(error_file_path, 'r') as err_file:
            # Log the contents of the error file
            logging.error(f"Error executing {script_name}. Details:\n{err_file.read()}")
        monitor_performance()

# List of scripts to execute
scripts = [
        "analyticalsandbox.py", "datapreparation.py",
    "traintestsplit.py", "modelgeneration.py", "dataqualityvisuals.py", "denialsconstraints.py"

]

for script in scripts:
    execute_script(script)