# -*- coding: utf-8 -*-
"""DenialsConstraints.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wTb5RAGzRD3bj9wMWOSIvAGyVadmyNgi
"""

import pandas as pd

#from google.colab import drive
#drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/ADSDB/exploitation/data.csv'

data = pd.read_csv(file_path)

# Defining denial constraints check functions
def check_unique_records(df):
    duplicate_mask = df.duplicated(subset=list(data.columns))
    return not duplicate_mask.any()

def check_missings(df):
    missing_values = df.isnull().sum()
    return not missing_values.any()

def check_year_range(df):
    return df['Year'].between(2008, 2022).all() and df['inflation_rate'].ge(-100).all()

def check_quarter_values(df):
    pattern = r'^[12]\d\d\dQ(IV|III|II|I)$'
    valid_quarters = df['Quarter'].str.match(pattern, na=False)
    return valid_quarters.all()

def check_activity_inflation_rate(df):
    return df['activity_rate'].between(0, 100).all() and df['inflation_rate'].ge(-100).all()

def check_house_price_index(df):
    return df['house_price_index'].ge(-100).all()

def check_provinces(df):
    known_provinces = [
        'National Total', 'Castilla - La Mancha', 'Comunitat Valenciana','Andalucía',
        'País Vasco', 'Asturias. Principado de', 'Castilla y León', 'Extremadura', 'Balears. Illes',
        'Cataluña', 'Cantabria', 'Galicia', 'Aragón', 'Madrid. Comunidad de', 'Murcia. Región de',
        'Navarra. Comunidad Foral de', 'Canarias', 'Rioja. La'
        ]
    return df['Provinces'].isin(known_provinces).all()

def check_sex_values(df):
    valid_sexes = ['Both sexes', 'Males', 'Females']
    return df['Sex'].isin(valid_sexes).all()

# Applying and checking constraints
constraints_results = {
    "Unique Records": check_unique_records(data),
    "No missings": check_missings(data),
    "Year Range": check_year_range(data),
    "Quarter Values": check_quarter_values(data),
    "Activity & Inflation Rate": check_activity_inflation_rate(data),
    "House Price Index Positive": check_house_price_index(data),
    "Valid Provinces": check_provinces(data),
    "Valid Sex Values": check_sex_values(data)
}

constraints_results

# Data repairing functions in case of corruptions
def fill_missings(df):
    if not check_missings(df):
        df.fillna(df.median(), inplace=True)
        return df
    return df

def remove_duplicates(df):
    df.drop_duplicates(inplace=True)
    return df

def repair_data(df):
    if not check_missings(df):
        df = fill_missings(df)
    if not check_unique_records(df):
        df = remove_duplicates(df)
    data.to_csv(file_path, index=False)

repair_data(data)