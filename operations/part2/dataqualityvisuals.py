# -*- coding: utf-8 -*-
"""DataQualityVisuals.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WXQxqi08xodNi1dT2hyaGYU0t1x1zFI_
"""

import pandas as pd
import numpy as np
import plotly.express as px

#from google.colab import drive
#drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/ADSDB/exploitation/data.csv'

data = pd.read_csv(file_path)

def check_data_quality(df, mild_outlier_threshold=1.5, severe_outlier_threshold=3):
    # Display basic information about the DataFrame
    print("DataFrame Info:")
    print(df.info())

    # Check for missing values
    print("\nMissing Values:")
    print(df.isnull().sum())

    # Check for duplicate rows
    print("\nDuplicate Rows:")
    duplicate_counts = df.duplicated().sum()
    print(f"Total number of duplicated rows: {duplicate_counts}")

    # Check data types of each column
    print("\nData Types:")
    print(df.dtypes)

    # Display basic statistics
    print("\nBasic Statistics:")
    print(df.describe())

    categorical_columns = df.select_dtypes(include=['object']).columns
    for column in categorical_columns:
        unique_values = df[column].unique()
        print(f"\nUnique values in {column}: {unique_values}")

    numeric_columns = df.select_dtypes(include=['number']).columns
    for column in numeric_columns:
        if np.issubdtype(df[column].dtype, np.number):
            Q1 = df[column].quantile(0.25)
            Q3 = df[column].quantile(0.75)
            IQR = Q3 - Q1

            mild_outliers = df[(df[column] < Q1 - mild_outlier_threshold * IQR) |
                               (df[column] > Q3 + mild_outlier_threshold * IQR)]

            severe_outliers = df[(df[column] < Q1 - severe_outlier_threshold * IQR) |
                                 (df[column] > Q3 + severe_outlier_threshold * IQR)]

            print(f"\nOutliers in {column} (Mild): {len(mild_outliers)}")
            print(f"\nOutliers in {column} (Severe): {len(severe_outliers)}\n")

def plot_pie_chart(df, column_name):
    value_counts = df[column_name].value_counts()
    fig = px.pie(names=value_counts.index, values=value_counts.values,
                 title=f'Distribution of Unique Values in {column_name}')
    fig.update_layout(showlegend=True)
    fig.show()

def plot_pie_charts(df):
  for column in df.columns:
    if df.dtypes[column] == object:
      plot_pie_chart(df, column)

def plot_histogram(df, column_name):
    fig = px.histogram(df, x=column_name,
                       title=f'Histogram of {column_name}',
                       labels={'x': column_name, 'y': 'Frequency'},
                       marginal='box')
    fig.update_layout(bargap=0.1)
    fig.show()

def plot_histograms(df):
  for column in df.columns:
    if df.dtypes[column] == float or df.dtypes[column] == int:
      plot_histogram(df, column)

def plot_visuals(df):
  plot_histograms(df)
  plot_pie_charts(df)

check_data_quality(data)

plot_visuals(data)